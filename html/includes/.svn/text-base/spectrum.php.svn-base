<?php 
class Spectrum{

	private function wavelength2RGB($length){		//Функция генерирования RGB цвета по длине волны		
	
		$gamma=1;								
		$Violet=380;
		$Blue=440;
		$Cyan=490;									//Опорные точки цвета
		$Green=510;
		$Yello=580;
		$Orange=645;
		$Red=780;

		switch ($length) {
    		case ($length >= $Violet AND $length < $Blue  ) :	 
    			$RGB['R']=-($length - $Blue) / ($Blue - $Violet); 
    			$RGB['G']=0; 
    			$RGB['B']=1; 
    		break;  

    		case ($length >= $Blue AND $length < $Cyan  ) : 
    			$RGB['R']=0; 
    			$RGB['G']=($length - $Blue) / ($Cyan - $Blue); 
    			$RGB['B']=1; 
    		break; 
	    	
	   		case ($length >= $Cyan AND $length < $Green) :
    			$RGB['R']=0; 
    			$RGB['G']=1; 
    			$RGB['B']=-($length - $Green) / ($Green - $Cyan); 
    		break;
    	
    		case ($length >= $Green AND $length < $Yello) :
    			$RGB['R']=($length - $Green) / ($Yello - $Green); 
    			$RGB['G']=1; 
    			$RGB['B']=0; 
    		break;

    		case ($length >= $Yello AND $length < $Orange) :
    			$RGB['R']=1; 
    			$RGB['G']=-($length - $Orange) / ($Orange - $Yello); 
    			$RGB['B']=0; 
    		break;
    	
    		case ($length >= $Orange AND $length < $Red):
    			$RGB['R']=1; 
    			$RGB['G']=0; 
    			$RGB['B']=0; 
    		break;
    	
    		default:
    			$RGB['R']=1;		//Белый цвет по умолчанию
    			$RGB['G']=1; 
    			$RGB['B']=1; 
		}
	
		switch ($length) {
    		case ($length >= $Violet AND $length < $Blue) : 
    			$correction= 0.3 + 0.7*($length - $Violet) / ($Blue - $Violet); 
    		break;  
		
    		case ($length >= 420 AND $length < 700) :
				$correction=1;
    		break;
    	
    		case ($length >= 700 AND $length < $Red) :
				$correction=0.3 + 0.7*($Red - $length) / ($Red - 700);
    		break;
    	
    		default:
				$correction=1; 
		}	
	
		$correction *=255;	
	
		$RGB['R']=intval($correction*$RGB['R'])*$gamma;
		$RGB['G']=intval($correction*$RGB['G']*$gamma);
		$RGB['B']=intval($correction*$RGB['B']*$gamma);
	
		return $RGB;
	}
	
	public function compressLengths($lengths,$accuracy){		//Функция компресси линий (соседние линии с определённой точностью сжимаются в одну)
		for($i=1; $i<count($lengths); $i++ ){
			if(round($lengths[$i-1],$accuracy) != round($lengths[$i],$accuracy)) $result[]=round($lengths[$i-1],$accuracy);			
		}
		return $result;
	}

	public function getSpectraSVG($transitions,$min,$max) {		//функция из массива переходов генерирует массив вида [длина волны:цвет] в формате JSON		
		$x=0;			
		$obj="{";
		
		foreach ($transitions as $transition=>$value){
			$length=$value['WAVELENGTH'];
			
			if ($length>=$min && $length<=$max ){			
				$RGB=$this->wavelength2RGB(round($length/10));
				$obj.='"'.$length.'":"rgb('.$RGB['R'].','.$RGB['G'].','.$RGB['B'].')",';
			}
		}			
  		$obj=substr($obj, 0, -1);
		$obj.='}';
		
		return $obj;
  	} 
}
?>